How did viewing a diff between two versions of a file help you see the bug that
was introduced?

	It helped me in following ways
	1. It helped to locate the bug quickly and save a lot of time.
	2. Allowed me to focus on the task and not get lost in finding the bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

	Having the entire history of a file will 
	1. Help me to locate the soucre of bugs faster.
	2. It will help me plan more efficiently for future changes to be implemented.   

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

	Pros of manual commit:
	1. Ensure that the commit is made when there is clear logical change.
	2. Combine smaller multiple changes to avoid cluttering the version control
	   history.

	Cons of manual commit:
	1. No commit over a long period of time.
	2. Smaller, but logically unrelated commits are combined together.


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

	Some version controls like Git allow saving multiple files in one commit, because
	the files being modified are more likely to have dependencies or inter-dependencies
	in order to make the change effective.

	Other version controls like Google Docs treat each file separatley, because the files being 
	modified are likey to be unrelated to each other or may not have any dependencies.


How can you use the commands git log and git diff to view the history of files?

    >>git log
    Command git log can be used to check the entire history of all the files.
    This log display a message and name of the author that can be used to identify what changes 
    were made and by whom.

    >>git diff
    Command git diff can be used to check the specific detials of changes done. This can be done
    by using command git diff and specifying the ID's of the change we are interested in to the previous 
    change ID.

How might using version control make you more confident to make changes that
could break something?

    Version control gives me the confidence that even if the changes I made break
    up something, I can easily check what changes caused the break. Version control 
    also allows me to revert to the previous working version quite easily.

Now that you have your workspace set up, what do you want to try using Git for?

    I would like to try using Git for:-
    	1. Creating a regular backup of my project files.
    	2. Tracking the changes made to my project files as the project evolves.
    	3. Collabrating with my team members to share the changes and keep my project upto date.
