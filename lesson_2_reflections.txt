What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, an empty directory .git is created.
	This directory is a hidden from the user.
	
	We need to initialize a repository, so that it allows git to keep record of all the 
	files that we added to the repository and the changes that we have made to these files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The working directory contains all the files, whereas a staging area is just a
	place holder which contains only the files that needs to be added or linked
	together for a single commit before actually including in the repository.

	Repository contains details of all the changes made till date, but staging area
	contains only the current changes that are to be included into the repository.

How can you use the staging area to make sure you have one commit per logical
change?

	In order to make sure that we have one commit per logical change, we will add only 
	those files to the staging area (using command git add) which have been modified 
	for implementing the required logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Some situations when branches would be helpful in keeping the history organized
	would be:
	1) To try out some experimental changes
	2) To create a demo application
	3) To make custom changes for a specific (or few) clients 
	4) To release code to review or testing
	5) To take a backup of the stable version

	Branches would help to ensure that the changes made do not affect the master branch 
	(i.e in most cases stable or working branch). It can also help track history and find bugs
	faster. Creating branches would also enable different tasks being carried out at the same 
	time.	

How do the diagrams help you visualize the branch structure?

	The diagrams help me visualize 
	1. Different branches that were created and at what point, so it gives 
	   details about changes that were included in the branch at the time it was made 
	2. It also help me understand what changes were made in the new branch	 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	
	As a reult of merging two branches 
	1. The changes made in one branch (coins in our case) are merged or included 
	   in the other branch (master in our case).
	2. The log history for the merged branch (i.e master) will now also show the history of 
	   the other branch (i.e coins)

	The diagram is represented the way we do to identify when the new branch was created 
	and when it was merged

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	  Pros of automatics merging vs. manual merge
	  1. Automatic merging allows easy, fast and accurate merging as against
	     manual merging which can be tedious and cause error if there are lot 
	     of changes and multiple files.

	  Cons of automatics merging vs manual merge
	  1. In case of conflicts (i.e are modification done in the same portion of the file)
	  	 automatic merging may not be able to make the correct decision as to which changes
	  	 to include and which changes to discard. 
	  2. If auto merging is still done in case of conflicts the results may be inconsistent and lead
	  	 to errors.
	  

