When would you want to use a remote repository rather than keeping all your work 
local?
    Typically whenever either a task is completed or thers is a significant work done like new feature added,
    enhancement made or bug fixes done or documents updated etc.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Remote as well as local repository may have multiple branches and they may not be the same
    so to ensure that only the required changes from the remote repository are included into
    the correct branch in the local repository always pulling changes manually is preferred
    than having Git automatically stay up-to-date.   

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks work within the Git environment. It is used to copy from one account
    to another within Git. Clones on the other hand is used for creating a copy
    of the repository from Git environment to a local computer. It can also be
    used to create or move the repository on a local computer, while Branches are
    created within the local repository.

    To copy a repository from Git, it could be forked instead of cloning to a
    local repository and then pushing it to Git.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a copy of the last known state of the remote gives you reference  
    points for all your local commits without the need for an network connection. 
    It also helps you in understanding if have moved ahead or diverged from the 
    remote.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without Git or GitHub, I would mail the file with changes to the person 
    who will be reviewing along with a copy of the previous file as a reference.

    Collaborating using Git or GitHub would be easier. Manually sending for every
    change especially when there are multiple files would be very cumbersome.


When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Some cases where a seperate branch would be used rather than directly making
    changes to the master would be:
    1) To try out some experimental changes
    2) Adding a new feature	
    3) To release code for testing

    Making changes in the master branch is much simpler process. Any changes made 
    are always available in the master.

    Branching helps while working in a collaborative environment. It allows every
    member to make changes without fear of breaking the stable version.

	
